##
## Stage 0: MPICH build
##

FROM intel/oneapi-hpckit:latest AS mpich-bld

RUN apt-get update && apt-get install -y wget make perl && \
    wget -q http://www.mpich.org/static/downloads/3.1.4/mpich-3.1.4.tar.gz && \
    tar xzf mpich-3.1.4.tar.gz && \
    cd mpich-3.1.4 && \
    export PATH=/opt/intel/inteloneapi/compiler/latest/linux/bin/intel64:${PATH} && \
    export LD_LIBRARY_PATH=/opt/intel/inteloneapi/compiler/latest/linux/lib:/opt/intel/inteloneapi/compiler/latest/linux/compiler/lib/intel64:${LD_LIBRARY_PATH} && \
    FC=ifort CC=icc CXX=icpc FCFLAGS="-I/opt/intel/inteloneapi/mpi/latest/include -O2" ./configure --prefix=/usr --enable-fortran --enable-cxx && \
    make -j4 && make install && ldconfig && \
    cd .. && rm -rf mpich-3.1.4*


##
## STAGE 1: zlib, HDF5 and NetCDF builds 
##

FROM intel/oneapi-hpckit:latest as io-bld 

ENV PATH=/opt/intel/inteloneapi/compiler/latest/linux/bin/intel64:$PATH \
    LD_LIBRARY_PATH=/opt/intel/inteloneapi/compiler/latest/linux/lib:/opt/intel/inteloneapi/compiler/latest/linux/compiler/lib/intel64:$LD_LIBRARY_PATH

RUN apt-get update && apt-get install -y wget make m4 && \
    wget -q https://www.zlib.net/zlib-1.2.11.tar.gz && \ 
    tar xzf zlib-1.2.11.tar.gz && cd zlib-1.2.11 && \
    mkdir -p /myapps/zlib && \ 
    CC=icc ./configure --prefix=/myapps/zlib && \
    make -j4 && make install && \
    cd .. && rm -rf zlib-1.2.11*

RUN wget -q https://github.com/live-clones/hdf5/archive/hdf5-1_12_0.tar.gz && \
    tar xzf hdf5-1_12_0.tar.gz && cd hdf5-hdf5-1_12_0 && \
    mkdir -p /myapps/hdf5 && \
    FC=ifort CC=icc CXX=icpc ./configure --prefix=/myapps/hdf5 --enable-fortran --with-zlib=/myapps/zlib && \
    make -j4 && make install && \
    cd .. && rm -rf hdf5*

RUN wget -q https://github.com/Unidata/netcdf-c/archive/v4.7.4.tar.gz && \
    tar xzf v4.7.4.tar.gz && cd netcdf* && \
    mkdir -p /myapps/netcdf && \
    export PATH=/myapps/hdf5/bin:${PATH} && \
    export LD_LIBRARY_PATH=/myapps/zlib/lib:/myapps/hdf5/lib:${LD_LIBRARY_PATH} && \
    export CPPFLAGS="-I/myapps/zlib/include -I/myapps/hdf5/include" && \
    export LDFLAGS="-L/myapps/zlib/lib -L/myapps/hdf5/lib" && \
    FC=ifort CC=icc CXX=icpc ./configure --prefix=/myapps/netcdf --disable-dap && \
    make -j4 && make install && \
    cd .. && rm -rf netcdf* v4.7.4.tar.gz 

RUN wget -q https://github.com/Unidata/netcdf-fortran/archive/v4.5.2.tar.gz && \
    tar xzf v4.5.2.tar.gz && cd netcdf* && \
    export PATH=/myapps/hdf5/bin:/myapps/netcdf/bin:${PATH} && \
    export LD_LIBRARY_PATH=/myapps/zlib/lib:/myapps/hdf5/lib:/myapps/netcdf/lib:/myapps/zlib/lib:${LD_LIBRARY_PATH} && \
    export CPPFLAGS="-I/myapps/zlib/include -I/myapps/hdf5/include -I/myapps/netcdf/include" && \
    export LDFLAGS="-L/myapps/zlib/lib -L/myapps/hdf5/lib -L/myapps/netcdf/lib" && \
    FC=ifort CC=icc CXX=icpc ./configure --prefix=/myapps/netcdf && \
    make install && \
    cd .. && rm -rf netcdf* v4.5.2.tar.gz

###
### Build NCEP libraries
###

FROM mpich-bld AS ncep-bld 

RUN apt-get update && apt-get install -y git && \
    git config --global http.sslverify false && \
    git clone https://github.com/NCAR/NCEPlibs.git && \
    cd NCEPlibs && \
    git checkout 3da51e139d5cd731c9fc27f39d88cb4e1328212b && \
    mkdir -p /myapps/ncep/include && mkdir -p /myapps/ncep/lib && \
    export PATH=/usr/bin:$PATH && \
    echo "y" | ./make_ncep_libs.sh -s cheyenne -c intel -d /myapps/ncep -o 1 && \ 
    cd include && cp *.mod /myapps/ncep/include && cd .. && \
    mv *.a /myapps/ncep/lib && cd .. && rm -rf NCEPlibs

###
### Build ESMF library and modules
###

FROM mpich-bld AS esmf-bld

COPY --from=io-bld /myapps/zlib/ /myapps/zlib/
COPY --from=io-bld /myapps/hdf5/ /myapps/hdf5/
COPY --from=io-bld /myapps/netcdf/ /myapps/netcdf/

RUN apt-get update && apt-get install -y git && \
    export ESMF_DIR=/esmf ESMF_INSTALL_PREFIX=/myapps/esmf ESMF_COMPILER=intel ESMF_COMM=mpich2 ESMF_LAPACK=internal && \
    export ESMF_NETCDF_INCLUDE=/myapps/netcdf/include && ESMF_NETCDF_LIBS="-L/myapps/netcdf/lib -lnetcdf -lnetcdff" ESMF_BOPT=O3 && \
    export LD_LIBRARY_PATH=/opt/intel/inteloneapi/compiler/latest/linux/lib:/opt/intel/inteloneapi/compiler/latest/linux/compiler/lib/intel64:$LD_LIBRARY_PATH && \
    git clone -b ESMF_8_0_0 --depth 1 https://git.code.sf.net/p/esmf/esmf && \
    export PATH=/usr/bin:$PATH && \
    cd esmf && make -j8 lib 
 
RUN mkdir -p /myapps/esmf/include && mkdir -p /myapps/esmf/lib && \
    cd /esmf/lib/libO/Linux.intel.64.mpich2.default && \
    cp *.so /myapps/esmf/lib/ && cp *.a /myapps/esmf/lib/ && cp esmf.mk /myapps/esmf/lib/ && \
    cd /esmf/mod/modO/Linux.intel.64.mpich2.default && \
    cp *.mod /myapps/esmf/include/ && \
    cd /esmf/src/include && \ 
    cp *.h /myapps/esmf/include/

###
### Build the FMS library and modules
###

FROM mpich-bld AS fms-bld

COPY --from=io-bld /myapps/zlib/ /myapps/zlib/
COPY --from=io-bld /myapps/hdf5/ /myapps/hdf5/
COPY --from=io-bld /myapps/netcdf/ /myapps/netcdf/

RUN apt-get update && apt-get install -y git autoconf libtool m4 && \
    git clone https://github.com/bats-core/bats-core.git && \
    cd bats-core && \
    mkdir -p /myapps/bats && \
   ./install.sh /myapps/bats && cd ..

RUN git clone https://github.com/VulcanClimateModeling/fv3gfs-fortran.git && \
    mkdir -p /myapps/fms && \
    cd fv3gfs-fortran/FMS && \
    export PATH=/usr/bin:/myapps/bats/bin:$PATH && \
    export LD_LIBRARY_PATH=/myapps/netcdf/lib:/myapps/hdf5/lib:/myapps/zlib/lib:/myapps/fms/lib:/opt/intel/inteloneapi/compiler/latest/linux/lib:/opt/intel/inteloneapi/compiler/latest/linux/compiler/lib/intel64:$LD_LIBRARY_PATH && \
    export CC=/usr/bin/mpicc FC=/usr/bin/mpif90 LDFLAGS="-L/myapps/netcdf/lib -L/myapps/hdf5/lib" && \
    export LOG_DRIVER_FLAGS="--comments" && \
    export CPPFLAGS="-I/myapps/netcdf/include -I/myapps/hdf5/include -I/myapps/zlib/include -Duse_LARGEFILE -DMAXFIELDMETHODS_=500 -DGFS_PHYS" && \ 
    export FCFLAGS="-O2 -debug minimal -fp-model source -qoverride-limits -qopt-prefetch=3 -xCORE-AVX2 -qno-opt-dynamic-align -i4 -real-size 64 -no-prec-div -no-prec-sqrt -qopenmp" && \
    export CFLAGS="-xCORE-AVX2 -qno-opt-dynamic-align -qopenmp -D__IFC -sox -fp-model source -O2 -debug minimal" && \
    autoreconf -i && \ 
    ./configure --prefix=/myapps/fms && \
    make && make install 

###
### Compile FV3
###

FROM mpich-bld AS fv3-bld 

COPY --from=io-bld /myapps/zlib/ /myapps/zlib/
COPY --from=io-bld /myapps/hdf5/ /myapps/hdf5/
COPY --from=io-bld /myapps/netcdf/ /myapps/netcdf/
COPY --from=esmf-bld /myapps/esmf/ /myapps/esmf/
COPY --from=fms-bld /myapps/fms/ /myapps/fms/
COPY --from=ncep-bld /myapps/ncep/ /myapps/ncep/

ENV FMS_DIR=/myapps/fms ESMF_DIR=/myapps/esmf ESMF_INC=/myapps/esmf/include NCEPLIBS_DIR=/myapps/ncep \
    MKLROOT=/opt/intel/inteloneapi/mkl/latest NETCDF_ROOT=/myapps/netcdf

RUN apt-get install -y git && \
    git clone https://github.com/VulcanClimateModeling/fv3gfs-fortran.git && \
    cd fv3gfs-fortran/FV3 && \
    cp conf/configure.fv3.intel_docker conf/configure.fv3 && \ 
    export FMS_DIR=/myapps/fms ESMF_DIR=/myapps/esmf ESMF_INC=/myapps/esmf/include NCEPLIBS_DIR=/myapps/ncep && \
    export LD_LIBRARY_PATH=/usr/lib:${LD_LIBRARY_PATH} && \
    export PATH=/usr/bin:${PATH} && \
    export MKLROOT=/opt/intel/inteloneapi/mkl/latest NETCDF_ROOT=/myapps/netcdf && \
    make clean_no_dycore && make libs_no_dycore -j8 && \
    cd atmos_cubed_sphere && make clean && \
    cd .. && make -j8 && \
    mkdir -p /myapps/fv3 && cp fv3.exe /myapps/fv3 && \
    cd ../.. && rm -rf fv3gfs-fortran

ENV LD_LIBRARY_PATH=/myapps/esmf/lib:/myapps/fms/lib:/myapps/netcdf/lib:/myapps/hdf5/lib:/myapps/zlib/lib:$LD_LIBRARY_PATH
